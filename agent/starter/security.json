{
  "agent_id": "security_agent_v1",
  "model": "claude",
  "role": "Web3 wallet security analyst with expertise in Solana blockchain threat detection",
  "network": "solana",
  "time": "24h",
  "research_tools": ["Solana RPC", "Threat Intelligence", "DuckDuckGo"],
  "metric_name": "security",
  "prompts": {
    "system": "You are a Web3 wallet security analyst specializing in Solana blockchain threat detection and prevention.\n\nYour role is to:\n- Monitor blockchain transactions for potential threats\n- Analyze smart contracts for malicious behavior\n- Detect scams, drains, MEV attacks, and suspicious patterns\n- Provide clear explanations of threats to users\n- Make quarantine/blocking recommendations with confidence scores\n- Use chain of thought reasoning to show your analysis process\n\nYou have access to:\n- Solana RPC for real-time blockchain data\n- Threat intelligence databases\n- Transaction pattern analysis tools\n- Contract analysis capabilities\n\nAlways explain your reasoning step by step so users can understand why you flagged something as a threat.\n\nYou are operating on the {network} network.\nYour current security metric state is: {metric_state}\nYour role: {role}\nTime horizon: {time}",
    
    "analysis_code_prompt": "Based on the security notifications and current threat landscape, generate Python code to analyze blockchain transactions for potential security threats.\n\nNotifications to analyze:\n{notifications_str}\n\nAvailable APIs:\n{apis_str}\n\nPrevious security analysis (for context):\n{prev_analysis}\n\nRAG Security Intelligence Summary:\n{rag_summary}\n\nSecurity state before previous analysis:\n{before_metric_state}\n\nSecurity state after previous analysis:\n{after_metric_state}\n\nGenerate comprehensive analysis code that:\n1. Fetches recent transactions from monitored wallets\n2. Analyzes transaction patterns for known threat signatures\n3. Checks contract interactions for suspicious behavior\n4. Examines transaction metadata for scam indicators\n5. Provides detailed threat assessment with confidence scores\n\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport requests\nimport json\nfrom datetime import datetime, timedelta\n\nload_dotenv()\n\ndef main():\n    print(\"üõ°Ô∏è Starting Security Analysis...\")\n    \n    # Your analysis code here\n    # Always print your reasoning and findings\n    \n    print(\"‚úÖ Security analysis complete\")\n\nmain()\n```\n\nUse chain of thought reasoning in your code comments and print statements to show your analysis process.",
    
    "analysis_code_on_first_prompt": "This is your first security analysis session. Generate Python code to establish baseline security monitoring for Solana wallets.\n\nAvailable APIs:\n{apis_str}\nNetwork: {network}\n\nGenerate code that:\n1. Sets up monitoring for suspicious transaction patterns\n2. Establishes baseline security metrics\n3. Checks for obvious threat indicators\n4. Provides initial security assessment\n\nShow your chain of thought reasoning throughout the analysis.\n\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport requests\nimport json\nfrom datetime import datetime\n\nload_dotenv()\n\ndef main():\n    print(\"üõ°Ô∏è Initializing Security Monitoring...\")\n    \n    # Your security analysis code here\n    # Include chain of thought reasoning in comments\n    \n    print(\"‚úÖ Initial security baseline established\")\n\nmain()\n```",
    
    "strategy_prompt": "Based on the security analysis results, formulate a comprehensive security strategy with clear chain of thought reasoning.\n\nSecurity Analysis Results:\n{analysis_results}\n\nAvailable APIs:\n{apis_str}\n\nCurrent security state:\n{before_metric_state}\n\nNetwork: {network}\nTime horizon: {time}\n\nCreate a detailed security strategy that includes:\n\n1. **Threat Assessment** (Chain of Thought):\n   - What specific threats were identified?\n   - What is the confidence level for each threat?\n   - What evidence supports these assessments?\n\n2. **Risk Prioritization** (Chain of Thought):\n   - Which threats pose the highest risk?\n   - What is the potential impact of each threat?\n   - How urgent is the response needed?\n\n3. **Recommended Actions** (Chain of Thought):\n   - What immediate actions should be taken?\n   - What items should be quarantined?\n   - What requires user review vs automatic blocking?\n\n4. **User Education**:\n   - How should we explain the threats to the user?\n   - What preventive measures should be recommended?\n\n5. **Monitoring Adjustments**:\n   - How should we adjust our monitoring based on findings?\n   - What new patterns should we watch for?\n\nUse clear, step-by-step reasoning to explain your strategy decisions. Show your thought process so users can understand and trust your recommendations.",
    
    "quarantine_code_prompt": "Based on the security strategy, generate Python code to implement protective actions (quarantine, blocking, monitoring).\n\nSecurity Strategy:\n{strategy_output}\n\nAvailable APIs:\n{apis_str}\n\nCurrent security state:\n{metric_state}\n\nAvailable security tools:\n{security_tools_str}\n\nMeta-swap API URL: {meta_swap_api_url}\nNetwork: {network}\n\nGenerate code that implements the security strategy with these capabilities:\n1. Quarantine suspicious items with appropriate confidence thresholds\n2. Block high-confidence threats automatically\n3. Flag items requiring user review\n4. Update security monitoring based on new threat patterns\n5. Log all actions with clear reasoning\n\nUse these security tools:\n- quarantine: Place suspicious items in quarantine for review\n- block: Immediately block confirmed threats\n- monitor: Increase monitoring for suspicious patterns\n- analyze: Deep analysis of flagged items\n\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport requests\nimport json\nfrom datetime import datetime\n\nload_dotenv()\n\ndef main():\n    print(\"üõ°Ô∏è Implementing Security Strategy...\")\n    \n    # Implementation code with chain of thought reasoning\n    # Show decision process for each action taken\n    \n    print(\"‚úÖ Security implementation complete\")\n\nmain()\n```\n\nInclude detailed logging and chain of thought reasoning for all security decisions. Users should be able to understand why each action was taken.",
    
    "regen_code_prompt": "The previous security code encountered errors. Analyze and fix the issues while maintaining the original security logic.\n\nErrors encountered:\n<Errors>\n{errors}\n</Errors>\n\nPrevious code:\n<Code>\n{previous_code}\n</Code>\n\nGenerate corrected code that:\n1. Fixes the specific errors identified\n2. Maintains the original security analysis intent\n3. Includes proper error handling\n4. Preserves chain of thought reasoning\n5. Ensures robust threat detection\n\nFormat the corrected code as follows:\n```python\nfrom dotenv import load_dotenv\nimport requests\nimport json\nfrom datetime import datetime\nimport traceback\n\nload_dotenv()\n\ndef main():\n    try:\n        print(\"üõ°Ô∏è Running Corrected Security Analysis...\")\n        \n        # Your corrected security code here\n        # Include error handling and validation\n        # Maintain chain of thought reasoning\n        \n        print(\"‚úÖ Security analysis completed successfully\")\n        \n    except Exception as e:\n        print(f\"‚ùå Security analysis error: {str(e)}\")\n        traceback.print_exc()\n\nmain()\n```\n\nEnsure the corrected code is more robust and handles edge cases properly while maintaining security effectiveness."
  },
  "notifications": ["blockchain_alerts", "security_alerts"],
  "security_tools": ["quarantine", "block", "monitor", "analyze"]
}